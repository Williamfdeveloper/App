// <auto-generated />
using System;
using App.Repository.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace App.Repository.Migrations
{
    [DbContext(typeof(DefaultContext))]
    partial class DefaultContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.28")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("App.Domain.Entities.Cartao", b =>
                {
                    b.Property<int>("CodigoCartao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_CARTAO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("CodigoUsuario")
                        .HasColumnName("CD_USUARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataVencimentoCartao")
                        .HasColumnName("DT_VENCIMENTO")
                        .HasColumnType("datetime2");

                    b.Property<string>("HashCartao")
                        .IsRequired()
                        .HasColumnName("DC_HASH_CARTAO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumeroCatao")
                        .IsRequired()
                        .HasColumnName("DC_NUMERO_CARTAO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SenhaCartao")
                        .HasColumnName("DC_SENHA")
                        .HasColumnType("int");

                    b.HasKey("CodigoCartao");

                    b.ToTable("TB_PESSOA_CARTAO","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.Endereco", b =>
                {
                    b.Property<int>("CodigoEndereco")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID_ENDERECO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasColumnName("DC_BAIRRO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasColumnName("DC_CEP")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnName("DC_CIDADE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasColumnName("DC_ESTADO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasColumnName("DC_NUMERO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rua")
                        .IsRequired()
                        .HasColumnName("DC_RUA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Usuario")
                        .HasColumnName("CD_USUARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCodigo")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CodigoEndereco");

                    b.HasIndex("UsuarioCodigo");

                    b.ToTable("TB_PESSOA_ENDERECO","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.FormaPagamento", b =>
                {
                    b.Property<int>("CodigoFormaPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_FORMA_PAGAMENTO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DescricaoFormaPagamento")
                        .IsRequired()
                        .HasColumnName("DC_FORMA_PAGAMENTO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IdTipoFormaPagamento")
                        .HasColumnName("ID_TIPO_FORMA_PAGAMENTO")
                        .HasColumnType("int");

                    b.HasKey("CodigoFormaPagamento");

                    b.ToTable("TB_FORMA_PAGAMENTO","dbo");

                    b.HasData(
                        new
                        {
                            CodigoFormaPagamento = 1,
                            DescricaoFormaPagamento = "Boleto",
                            IdTipoFormaPagamento = 1
                        },
                        new
                        {
                            CodigoFormaPagamento = 2,
                            DescricaoFormaPagamento = "Credito",
                            IdTipoFormaPagamento = 2
                        },
                        new
                        {
                            CodigoFormaPagamento = 3,
                            DescricaoFormaPagamento = "Debito",
                            IdTipoFormaPagamento = 3
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Pedido", b =>
                {
                    b.Property<int>("CodigoPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_PEDIDO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataAprovacaoPedido")
                        .HasColumnName("DH_APROVACAO_PEDIDO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPedido")
                        .HasColumnName("DH_PEDIDO")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PedidoPagamentoCodigoPedidoPagamento")
                        .HasColumnType("int");

                    b.Property<int>("QuatidadeItensVenda")
                        .HasColumnName("QT_ITENS_VENDA")
                        .HasColumnType("int");

                    b.Property<int>("SituacaoPedido")
                        .HasColumnName("ID_SITUACAO_PEDIDO")
                        .HasColumnType("int");

                    b.Property<Guid>("Usuario")
                        .HasColumnName("CD_USUARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UsuarioCodigo")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnName("MO_VALOR_TOTAL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotalComDesconto")
                        .HasColumnName("MO_VALOR_TOTAL_COM_DESCONTO")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("usuarioId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CodigoPedido");

                    b.HasIndex("PedidoPagamentoCodigoPedidoPagamento");

                    b.HasIndex("UsuarioCodigo");

                    b.HasIndex("usuarioId");

                    b.ToTable("TB_PEDIDO","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.PedidoHistorico", b =>
                {
                    b.Property<int>("CodigoPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_PEDIDO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataAtualizacaoFim")
                        .HasColumnName("DH_SITUACAO_FIM")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataAtualizacaoInicio")
                        .HasColumnName("DH_SITUACAO_INICIO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataSituacao")
                        .HasColumnName("DH_SITUACAO")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSituacaoPedido")
                        .HasColumnName("ID_SITUACAO")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoCodigoPedido")
                        .HasColumnType("int");

                    b.HasKey("CodigoPedido");

                    b.HasIndex("PedidoCodigoPedido");

                    b.ToTable("TB_PEDIDO_HISTORICO","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.PedidoItem", b =>
                {
                    b.Property<int>("CodigoPedidoItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_PEDIDO_ITEM")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoPedido")
                        .HasColumnName("CD_PEDIDO")
                        .HasColumnType("int");

                    b.Property<int>("CodigoProduto")
                        .HasColumnName("CD_PRODUTOR")
                        .HasColumnType("int");

                    b.Property<int?>("PedidoCodigoPedido")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnName("QT_ITEM")
                        .HasColumnType("int")
                        .HasMaxLength(2);

                    b.Property<decimal>("ValorTotal")
                        .HasColumnName("MO_VALOR_TOTAL")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnName("MO_VALOR_UNITARIO")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CodigoPedidoItem");

                    b.HasIndex("PedidoCodigoPedido");

                    b.ToTable("TB_PEDIDO_ITEM","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.PedidoPagamento", b =>
                {
                    b.Property<int>("CodigoPedidoPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_PEDIDO_PAGAMENTO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoPedido")
                        .HasColumnName("CD_PEDIDO")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAprovado")
                        .HasColumnName("DH_PAGAMENTO_APROVADO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnName("DH_ATUALIZACAO")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnName("DH_PAGAMENTO")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSituacaoPagamento")
                        .HasColumnName("ID_SITUACAO_PAGAMENTO")
                        .HasColumnType("int");

                    b.HasKey("CodigoPedidoPagamento");

                    b.ToTable("TB_PEDIDO_PAGAMENTO","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.PedidoPagamentoHistorico", b =>
                {
                    b.Property<int>("CodigoPedidoPagamentoHistorico")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_PEDIDO_PAGAMENTO_HISTORICO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CodigoPedidoPagamento")
                        .HasColumnName("CD_PEDIDO_PAGAMENTO")
                        .HasColumnType("int");

                    b.Property<DateTime>("DataAtualizacao")
                        .HasColumnName("DH_ATUALIZACAO")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdSituacaoPedidoPagamento")
                        .HasColumnName("ID_SITUACAO_PAGAMENTO")
                        .HasColumnType("int");

                    b.HasKey("CodigoPedidoPagamentoHistorico");

                    b.ToTable("TB_PEDIDO_PAGAMENTO_HISTORICO","dbo");
                });

            modelBuilder.Entity("App.Domain.Entities.Produto", b =>
                {
                    b.Property<int>("CodigoProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_PRODUTO")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnName("DC_DESCRICAO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkDownload")
                        .IsRequired()
                        .HasColumnName("DC_LINK")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PedidoItemCodigoPedidoItem")
                        .HasColumnType("int");

                    b.Property<decimal>("Valor")
                        .HasColumnName("MO_VALOR")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CodigoProduto");

                    b.HasIndex("PedidoItemCodigoPedidoItem");

                    b.ToTable("TB_PRODUTO","dbo");

                    b.HasData(
                        new
                        {
                            CodigoProduto = 1,
                            Descricao = "Aplicativo Teste 001",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 2,
                            Descricao = "Aplicativo Teste 002",
                            LinkDownload = "http://localhost",
                            Valor = 100m
                        },
                        new
                        {
                            CodigoProduto = 3,
                            Descricao = "Aplicativo Teste 003",
                            LinkDownload = "http://localhost",
                            Valor = 300m
                        },
                        new
                        {
                            CodigoProduto = 4,
                            Descricao = "Aplicativo Teste 004",
                            LinkDownload = "http://localhost",
                            Valor = 800m
                        },
                        new
                        {
                            CodigoProduto = 5,
                            Descricao = "Aplicativo Teste 005",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 6,
                            Descricao = "Aplicativo Teste 006",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 7,
                            Descricao = "Aplicativo Teste 007",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 8,
                            Descricao = "Aplicativo Teste 008",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 9,
                            Descricao = "Aplicativo Teste 009",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 10,
                            Descricao = "Aplicativo Teste 010",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        },
                        new
                        {
                            CodigoProduto = 11,
                            Descricao = "Aplicativo Teste 011",
                            LinkDownload = "http://localhost",
                            Valor = 500m
                        });
                });

            modelBuilder.Entity("App.Domain.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Codigo")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("CD_DADO_USUARIO")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasColumnName("DC_CPF")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnName("DT_NASCIMENTO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnName("DC_NOME")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sexo")
                        .HasColumnName("ID_SEXO")
                        .HasColumnType("int");

                    b.HasKey("Codigo");

                    b.ToTable("TB_USUARIO","dbo");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("App.Domain.Entities.Endereco", b =>
                {
                    b.HasOne("App.Domain.Entities.Usuario", null)
                        .WithMany("Endereco")
                        .HasForeignKey("UsuarioCodigo");
                });

            modelBuilder.Entity("App.Domain.Entities.Pedido", b =>
                {
                    b.HasOne("App.Domain.Entities.PedidoPagamento", "PedidoPagamento")
                        .WithMany()
                        .HasForeignKey("PedidoPagamentoCodigoPedidoPagamento");

                    b.HasOne("App.Domain.Entities.Usuario", null)
                        .WithMany("Pedidos")
                        .HasForeignKey("UsuarioCodigo");

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "usuario")
                        .WithMany()
                        .HasForeignKey("usuarioId");
                });

            modelBuilder.Entity("App.Domain.Entities.PedidoHistorico", b =>
                {
                    b.HasOne("App.Domain.Entities.Pedido", null)
                        .WithMany("PedidoHistorico")
                        .HasForeignKey("PedidoCodigoPedido");
                });

            modelBuilder.Entity("App.Domain.Entities.PedidoItem", b =>
                {
                    b.HasOne("App.Domain.Entities.Pedido", null)
                        .WithMany("PedidoItem")
                        .HasForeignKey("PedidoCodigoPedido");
                });

            modelBuilder.Entity("App.Domain.Entities.Produto", b =>
                {
                    b.HasOne("App.Domain.Entities.PedidoItem", null)
                        .WithMany("Produtos")
                        .HasForeignKey("PedidoItemCodigoPedidoItem");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
